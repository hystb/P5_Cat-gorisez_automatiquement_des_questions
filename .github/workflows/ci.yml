name: push on master

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  test:
    name: Python Lint and Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      # - name: Install dependencies
      #   run: |
      #     python -m pip install --upgrade pip
      #     pip install -r docker/requirements_flask.txt

      # - name: Run Linter
      #   run: |
      #     pip install flake8
      #     flake8 .

      - name: Run Unit Tests
        run: |
          pip install -r docker/requirements_flask.txt
          PYTHONPATH=./flask_app python -m unittest flask_app/tests.py

  # docker_compose:
  #   name: Build, Test Docker Compose Services
  #   runs-on: ubuntu-latest
  #   needs: test

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3

  #     - name: Build and run docker-compose services
  #       run: |
  #         docker compose -f docker-compose.yml up --build -d
          
  #     - name: Check Docker Compose status
  #       run: |
  #         docker compose -f docker-compose.yml ps

  #     - name: Shutdown Docker Compose services
  #       run: |
  #         docker compose -f docker-compose.yml down

  # push_images:
  #   name: Build and Push Docker Images
  #   runs-on: ubuntu-latest
  #   needs: docker_compose 

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3

  #     - name: Log into DockerHub
  #       run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

  #     - name: Build and run docker-compose services
  #       run: |
  #         docker compose -f docker-compose.yml build

  #     - name: Detect and Push Docker Images
  #       run: |
  #         IMAGE_TAG=${{ github.sha }}  # Using GitHub commit SHA for image tag
          
  #         services=$(docker images --format "{{.Repository}}" | grep -E "p5_cat-gorisez_automatiquement_des_questions-mlflow|p5_cat-gorisez_automatiquement_des_questions-flask_app")
          
  #         for service in $services; do
  #           # Tag the images with both commit SHA and latest
  #           docker tag $service ${{ secrets.DOCKER_USERNAME }}/$service:${IMAGE_TAG}
  #           docker tag $service ${{ secrets.DOCKER_USERNAME }}/$service:latest
            
  #           # Push both tags to DockerHub
  #           docker push ${{ secrets.DOCKER_USERNAME }}/$service:${IMAGE_TAG}
  #           docker push ${{ secrets.DOCKER_USERNAME }}/$service:latest
  #         done
