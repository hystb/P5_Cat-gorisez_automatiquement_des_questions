name: push on master

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  # Job 1: Linting and Python Testing
  test:
    name: Python Lint and Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r docker/requirements_flask.txt

      - name: Run Linter
        run: |
          pip install flake8
          flake8 .

      - name: Run Unit Tests
        run: |
          pip install pytest
          pytest .github/tests/

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install linters
        run: |
          npm install -g htmlhint stylelint eslint

      - name: Run HTML linter
        run: |
          htmlhint "frontend/*.html" 

      - name: Run JavaScript linter
        run: |
          eslint "frontend/*.js" 

  # Job 2: Build, Test, and Push Docker Compose Services
  docker_compose:
    name: Build, Test, and Push Docker Compose Services
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # # Step 1: Log into DockerHub (using GitHub Secrets for credentials)
      # - name: Log into DockerHub
      #   run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      # Step 2: Build and run services using `docker compose`
      - name: Build and run docker-compose services
        run: |
          docker compose -f docker-compose.yml up --build -d
          
      # Step 3: Check services status
      - name: Check Docker Compose status
        run: |
          docker compose -f docker-compose.yml ps

      # # Step 4: Run tests inside the running containers (optional)
      # - name: Run API Tests inside Docker
      #   run: |
      #     docker exec <container_name> pytest /path/to/your/tests  # Adjust container name and path as needed

      # Step 5: Shutdown Docker containers after the tests
      - name: Shutdown Docker Compose services
        run: |
          docker compose -f docker-compose.yml down

  # # Job 3: Build and Push Docker Images Dynamically
  # push_images:
  #   name: Build and Push Docker Images
  #   runs-on: ubuntu-latest
  #   needs: docker_compose  # This job only runs if the docker_compose job is successful

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3

  #     # Step 1: Log into DockerHub (using GitHub Secrets for credentials)
  #     - name: Log into DockerHub
  #       run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

  #     # Step 2: Detect running services from docker ps and tag/push images dynamically
  #     - name: Detect and Push Docker Images
  #       run: |
  #         IMAGE_TAG=${{ github.sha }}  # Using GitHub commit SHA for image tag
          
  #         # Get all running services from `docker compose ps`
  #         services=$(docker compose -f docker-compose.yml ps --services)
          
  #         for service in $services; do
  #           # Tag the images with both commit SHA and latest
  #           docker tag $service ${{ secrets.DOCKER_USERNAME }}/$service:${IMAGE_TAG}
  #           docker tag $service ${{ secrets.DOCKER_USERNAME }}/$service:latest
            
  #           # Push both tags to DockerHub
  #           docker push ${{ secrets.DOCKER_USERNAME }}/$service:${IMAGE_TAG}
  #           docker push ${{ secrets.DOCKER_USERNAME }}/$service:latest
  #         done
